agent_id: lambda_agent
base_prompt: You are an expert AWS cost optimization specialist focusing on Lambda functions.
capability:
  analysis_window_days: 30
  optional_metrics:
  - errors
  - throttles
  required_metrics:
  - invocation_count
  - duration_avg
  - memory_used
  service: Lambda
  supported_recommendation_types:
  - rightsizing
  thresholds:
    duration_efficiency_threshold: 80.0
    memory_utilization_threshold: 60.0
confidence_threshold: 0.7
enabled: true
max_tokens: 2000
min_cost_threshold: 1.0
service: Lambda

# Custom conditional rules for Lambda optimization
custom_rules:
  # High-frequency functions need performance optimization
  - name: "high_frequency_performance"
    description: "High-frequency Lambda functions prioritize performance over cost"
    enabled: true
    priority: 90
    logic: "AND"
    conditions:
      - field: "invocation_count"
        operator: "greater_than"
        value: 1000000  # 1M+ invocations per month
        description: "High invocation frequency"
    threshold_overrides:
      memory_utilization_threshold: 40.0  # Allow more memory overhead
    custom_prompt: "This is a high-frequency Lambda function (1M+ invocations). Slight performance improvements can yield significant cost savings. Consider provisioned concurrency for consistent performance."
    
  # Development functions can be more aggressive
  - name: "dev_lambda_aggressive"
    description: "Development Lambda functions can be optimized aggressively"
    enabled: true
    priority: 70
    logic: "OR"
    conditions:
      - field: "tag.Environment"
        operator: "in"
        value: ["dev", "test", "staging"]
        description: "Non-production environment"
    threshold_overrides:
      memory_utilization_threshold: 80.0  # Aggressive memory optimization
    custom_prompt: "This is a development Lambda function. Be aggressive with memory optimization as performance consistency is less critical."
    
  # Critical functions avoid changes
  - name: "critical_lambda_conservative"
    description: "Critical Lambda functions should have conservative optimization"
    enabled: true
    priority: 100
    logic: "OR"
    conditions:
      - field: "tag.Criticality"
        operator: "equals"
        value: "critical"
        description: "Critical function"
      - field: "tag.Service"
        operator: "in"
        value: ["payment", "auth", "security"]
        description: "Critical service types"
    threshold_overrides:
      memory_utilization_threshold: 30.0  # Very conservative
    risk_adjustment: "increase"
    custom_prompt: "This is a critical Lambda function. Be extremely conservative with optimization recommendations to avoid any performance degradation."
    
  # Low-usage functions aggressive optimization
  - name: "low_usage_optimization"
    description: "Low-usage functions can be optimized for minimum cost"
    enabled: true
    priority: 60
    logic: "AND"
    conditions:
      - field: "invocation_count"
        operator: "less_than"
        value: 1000  # Less than 1K invocations per month
        description: "Low usage function"
    threshold_overrides:
      memory_utilization_threshold: 90.0  # Minimize memory allocation
    custom_prompt: "This is a low-usage Lambda function (<1K invocations/month). Prioritize minimum memory allocation to reduce costs, even if it increases execution time slightly."
    
  # Error-prone functions need stability
  - name: "error_prone_stability"
    description: "Functions with high error rates need stability focus"
    enabled: true
    priority: 80
    logic: "AND"
    conditions:
      - field: "errors"
        operator: "greater_than"
        value: 100  # More than 100 errors per analysis period
        description: "High error rate"
    skip_recommendation_types:
      - "rightsizing"
    custom_prompt: "This function has a high error rate. Focus on stability rather than cost optimization. Consider investigating the root cause of errors before making performance changes."

service_specific_prompt: '

  Analyze Lambda functions for cost optimization opportunities. Consider:

  1. Memory allocation vs actual usage

  2. Execution duration patterns

  3. Invocation frequency and patterns

  4. Cold start optimization

  5. Cost per invocation analysis


  Provide specific recommendations with memory settings and architectural improvements.

  '
temperature: 0.1
